version: "3.9"

services:
  db:
    image: postgres:16
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-capitalguard}
      POSTGRES_USER: ${POSTGRES_USER:-cg}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-cgpass}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    # Healthcheck ensures that other services only start after PostgreSQL is truly ready to accept connections.
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-cg} -d ${POSTGRES_DB:-capitalguard}"]
      interval: 5s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "${PORT:-8000}:8000"
    env_file:
      - .env
    environment:
      # Pass DB connection details to the entrypoint script and the application
      - DB_HOST=db
      - DB_PORT=5432
      - DATABASE_URL=postgresql+psycopg://${POSTGRES_USER:-cg}:${POSTGRES_PASSWORD:-cgpass}@db:5432/${POSTGRES_DB:-capitalguard}
    depends_on:
      db:
        condition: service_healthy
    # Pass the database host/port and the final command to the entrypoint script.
    # The command starts supervisord, which in turn manages the uvicorn process.
    command: ["db", "5432", "supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]
    restart: unless-stopped

  watcher:
    # ✅ BEST PRACTICE: Reuse the same build as the 'api' service to ensure a consistent environment.
    # This avoids code duplication and potential inconsistencies.
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DATABASE_URL=postgresql+psycopg://${POSTGRES_USER:-cg}:${POSTGRES_PASSWORD:-cgpass}@db:5432/${POSTGRES_DB:-capitalguard}
    depends_on:
      db:
        condition: service_healthy
    # ✅ BEST PRACTICE: Override the command to run the watcher script directly.
    # The entrypoint.sh script will still run first, wait for the DB, run migrations,
    # and then execute this specific command.
    command: ["db", "5432", "python", "-m", "capitalguard.infrastructure.sched.watcher_ws"]
    restart: unless-stopped

volumes:
  pgdata:
    # This ensures the database data persists across container restarts.