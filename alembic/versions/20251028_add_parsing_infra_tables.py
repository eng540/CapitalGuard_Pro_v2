# --- alembic/versions/20251028_add_parsing_infra_tables.py ---
"""add parsing infrastructure tables

Revision ID: 20251028_add_parsing_infra
Revises: 20251022_add_profit_stop_fields # <-- عدّل هذا إذا لزم الأمر
Create Date: 2025-10-28 17:10:00.000000 # <-- عدّل هذا إذا لزم الأمر

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '20251028_add_parsing_infra'
down_revision = '20251022_add_profit_stop_fields' # <-- تأكد من صحة هذا
branch_labels = None
depends_on = None

def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('parsing_templates',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('pattern_type', sa.String(length=50), server_default='regex', nullable=False),
        sa.Column('pattern_value', sa.Text(), nullable=False),
        sa.Column('analyst_id', sa.Integer(), nullable=True),
        sa.Column('is_public', sa.Boolean(), server_default=sa.text('false'), nullable=False),
        sa.Column('version', sa.Integer(), server_default='1', nullable=False),
        sa.Column('confidence_score', sa.Numeric(precision=5, scale=2), nullable=True),
        sa.Column('user_correction_rate', sa.Numeric(precision=5, scale=2), nullable=True),
        sa.Column('stats', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.ForeignKeyConstraint(['analyst_id'], ['users.id'], ondelete='SET NULL'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_parsing_templates_analyst_id'), 'parsing_templates', ['analyst_id'], unique=False)
    op.create_index(op.f('ix_parsing_templates_is_public'), 'parsing_templates', ['is_public'], unique=False)

    op.create_table('parsing_attempts',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('raw_content', sa.Text(), nullable=False),
        sa.Column('used_template_id', sa.Integer(), nullable=True),
        sa.Column('result_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('was_successful', sa.Boolean(), server_default=sa.text('false'), nullable=False),
        sa.Column('was_corrected', sa.Boolean(), server_default=sa.text('false'), nullable=False),
        sa.Column('corrections_diff', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('latency_ms', sa.Integer(), nullable=True),
        sa.Column('parser_path_used', sa.String(length=50), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['used_template_id'], ['parsing_templates.id'], ondelete='SET NULL'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_parsing_attempts_user_id'), 'parsing_attempts', ['user_id'], unique=False)
    op.create_index(op.f('ix_parsing_attempts_was_successful'), 'parsing_attempts', ['was_successful'], unique=False)
    op.create_index(op.f('ix_parsing_attempts_was_corrected'), 'parsing_attempts', ['was_corrected'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_parsing_attempts_was_corrected'), table_name='parsing_attempts')
    op.drop_index(op.f('ix_parsing_attempts_was_successful'), table_name='parsing_attempts')
    op.drop_index(op.f('ix_parsing_attempts_user_id'), table_name='parsing_attempts')
    op.drop_table('parsing_attempts')

    op.drop_index(op.f('ix_parsing_templates_is_public'), table_name='parsing_templates')
    op.drop_index(op.f('ix_parsing_templates_analyst_id'), table_name='parsing_templates')
    op.drop_table('parsing_templates')
    # ### end Alembic commands ###

# --- END of alembic migration ---