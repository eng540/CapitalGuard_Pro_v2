"""Implement v3 multi-tenant schema

Revision ID: 20251004_implement_v3_multi_tenant_schema
Revises: 20250914_create_initial_schema
Create Date: 2025-10-04 00:00:00.000000
"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '20251004_implement_v3_multi_tenant_schema' # استبدل هذا بالمعرف الذي يتم إنشاؤه تلقائيًا
down_revision = '20250914_create_initial_schema'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Create new ENUM types
    usertype = postgresql.ENUM('TRADER', 'ANALYST', name='usertype')
    usertype.create(op.get_bind())
    
    usertradestatus = postgresql.ENUM('OPEN', 'CLOSED', name='usertradestatus')
    usertradestatus.create(op.get_bind())

    # Create new tables
    op.create_table('analyst_profiles',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('public_name', sa.String(), nullable=True),
        sa.Column('bio', sa.Text(), nullable=True),
        sa.Column('is_public', sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('user_id')
    )
    op.create_table('analyst_stats',
        sa.Column('analyst_id', sa.Integer(), nullable=False),
        sa.Column('win_rate', sa.Numeric(precision=5, scale=2), nullable=True),
        sa.Column('total_pnl', sa.Numeric(precision=10, scale=4), nullable=True),
        sa.Column('total_trades', sa.Integer(), nullable=True),
        sa.Column('last_updated', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['analyst_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('analyst_id')
    )
    op.create_table('subscriptions',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('trader_user_id', sa.Integer(), nullable=False),
        sa.Column('analyst_user_id', sa.Integer(), nullable=False),
        sa.Column('start_date', sa.DateTime(), nullable=True),
        sa.Column('end_date', sa.DateTime(), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(['analyst_user_id'], ['users.id'], ),
        sa.ForeignKeyConstraint(['trader_user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_trades',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('asset', sa.String(), nullable=False),
        sa.Column('side', sa.String(), nullable=False),
        sa.Column('entry', sa.Numeric(precision=20, scale=8), nullable=False),
        sa.Column('stop_loss', sa.Numeric(precision=20, scale=8), nullable=False),
        sa.Column('targets', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column('status', sa.Enum('OPEN', 'CLOSED', name='usertradestatus'), nullable=False),
        sa.Column('close_price', sa.Numeric(precision=20, scale=8), nullable=True),
        sa.Column('pnl_percentage', sa.Numeric(precision=10, scale=4), nullable=True),
        sa.Column('source_recommendation_id', sa.Integer(), nullable=True),
        sa.Column('source_forwarded_text', sa.Text(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('closed_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['source_recommendation_id'], ['recommendations.id'], ),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_trades_source_recommendation_id'), 'user_trades', ['source_recommendation_id'], unique=False)
    op.create_index(op.f('ix_user_trades_user_id'), 'user_trades', ['user_id'], unique=False)

    # Alter existing tables
    op.add_column('channels', sa.Column('analyst_id', sa.Integer(), nullable=False))
    op.drop_constraint('channels_user_id_fkey', 'channels', type_='foreignkey')
    op.create_foreign_key(None, 'channels', 'users', ['analyst_id'], ['id'])
    op.drop_column('channels', 'user_id')
    
    op.add_column('recommendations', sa.Column('analyst_id', sa.Integer(), nullable=False))
    op.alter_column('recommendations', 'entry', existing_type=sa.DOUBLE_PRECISION, type_=sa.Numeric(precision=20, scale=8), existing_nullable=False)
    op.alter_column('recommendations', 'stop_loss', existing_type=sa.DOUBLE_PRECISION, type_=sa.Numeric(precision=20, scale=8), existing_nullable=False)
    op.alter_column('recommendations', 'targets', existing_type=postgresql.JSON(astext_type=sa.Text()), type_=postgresql.JSONB(astext_type=sa.Text()), existing_nullable=False)
    op.alter_column('recommendations', 'exit_price', existing_type=sa.DOUBLE_PRECISION, type_=sa.Numeric(precision=20, scale=8), existing_nullable=True)
    op.alter_column('recommendations', 'highest_price_reached', existing_type=sa.DOUBLE_PRECISION, type_=sa.Numeric(precision=20, scale=8), existing_nullable=True)
    op.alter_column('recommendations', 'lowest_price_reached', existing_type=sa.DOUBLE_PRECISION, type_=sa.Numeric(precision=20, scale=8), existing_nullable=True)
    op.alter_column('recommendations', 'profit_stop_price', existing_type=sa.DOUBLE_PRECISION, type_=sa.Numeric(precision=20, scale=8), existing_nullable=True)
    op.alter_column('recommendations', 'open_size_percent', existing_type=sa.DOUBLE_PRECISION, type_=sa.Numeric(precision=5, scale=2), existing_nullable=False)
    op.drop_constraint('recommendations_user_id_fkey', 'recommendations', type_='foreignkey')
    op.create_foreign_key(None, 'recommendations', 'users', ['analyst_id'], ['id'])
    op.drop_column('recommendations', 'user_id')

    op.add_column('users', sa.Column('user_type', sa.Enum('TRADER', 'ANALYST', name='usertype'), nullable=False, server_default='TRADER'))
    op.alter_column('users', 'user_type', server_default=None) # Remove server_default after population
    op.alter_column('users', 'is_active', existing_type=sa.BOOLEAN(), nullable=True, server_default=sa.text('false'))
    op.drop_column('users', 'hashed_password')
    op.drop_column('users', 'email')
    
    # Drop old tables that are no longer needed
    op.drop_table('user_roles')
    op.drop_table('roles')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('users', sa.Column('hashed_password', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.alter_column('users', 'is_active', existing_type=sa.BOOLEAN(), nullable=False, server_default=sa.text('true'))
    op.drop_column('users', 'user_type')

    op.add_column('recommendations', sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'recommendations', type_='foreignkey')
    op.create_foreign_key('recommendations_user_id_fkey', 'recommendations', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.alter_column('recommendations', 'open_size_percent', existing_type=sa.Numeric(precision=5, scale=2), type_=sa.DOUBLE_PRECISION, existing_nullable=False)
    op.alter_column('recommendations', 'profit_stop_price', existing_type=sa.Numeric(precision=20, scale=8), type_=sa.DOUBLE_PRECISION, existing_nullable=True)
    op.alter_column('recommendations', 'lowest_price_reached', existing_type=sa.Numeric(precision=20, scale=8), type_=sa.DOUBLE_PRECISION, existing_nullable=True)
    op.alter_column('recommendations', 'highest_price_reached', existing_type=sa.Numeric(precision=20, scale=8), type_=sa.DOUBLE_PRECISION, existing_nullable=True)
    op.alter_column('recommendations', 'exit_price', existing_type=sa.Numeric(precision=20, scale=8), type_=sa.DOUBLE_PRECISION, existing_nullable=True)
    op.alter_column('recommendations', 'targets', existing_type=postgresql.JSONB(astext_type=sa.Text()), type_=postgresql.JSON(astext_type=sa.Text()), existing_nullable=False)
    op.alter_column('recommendations', 'stop_loss', existing_type=sa.Numeric(precision=20, scale=8), type_=sa.DOUBLE_PRECISION, existing_nullable=False)
    op.alter_column('recommendations', 'entry', existing_type=sa.Numeric(precision=20, scale=8), type_=sa.DOUBLE_PRECISION, existing_nullable=False)
    op.drop_column('recommendations', 'analyst_id')

    op.add_column('channels', sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'channels', type_='foreignkey')
    op.create_foreign_key('channels_user_id_fkey', 'channels', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_column('channels', 'analyst_id')

    op.drop_index(op.f('ix_user_trades_user_id'), table_name='user_trades')
    op.drop_index(op.f('ix_user_trades_source_recommendation_id'), table_name='user_trades')
    op.drop_table('user_trades')
    op.drop_table('subscriptions')
    op.drop_table('analyst_stats')
    op.drop_table('analyst_profiles')
    
    op.create_table('roles',
        sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column('name', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint('id', name='roles_pkey'),
        sa.UniqueConstraint('name', name='roles_name_key')
    )
    op.create_table('user_roles',
        sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column('role_id', sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(['role_id'], ['roles.id'], name='user_roles_role_id_fkey', ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_roles_user_id_fkey', ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id', name='user_roles_pkey'),
        sa.UniqueConstraint('user_id', 'role_id', name='user_roles_user_id_role_id_key')
    )
    
    # Drop new ENUM types
    usertradestatus = postgresql.ENUM('OPEN', 'CLOSED', name='usertradestatus')
    usertradestatus.drop(op.get_bind())
    
    usertype = postgresql.ENUM('TRADER', 'ANALYST', name='usertype')
    usertype.drop(op.get_bind())
    # ### end Alembic commands ###