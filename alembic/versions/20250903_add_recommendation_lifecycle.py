# --- START OF FILE: alembic/versions/20250903_add_recommendation_lifecycle.py ---
"""add recommendation lifecycle status and timestamps

Revision ID: 20250903_add_lifecycle
Revises: 20250829_add_message_meta
Create Date: 2025-09-03 15:00:00.000000

"""
from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision = '20250903_add_lifecycle'
# ⚠️ هام جداً: تأكد من أن هذا الرقم يطابق آخر ملف ترحيل لديك بالفعل.
# بناءً على الملفات السابقة، آخر ملف كان 20250829_01...
down_revision = "20250829_add_message_meta"
branch_labels = None
depends_on = None

# Define the new Enum type for PostgreSQL
recommendation_status_enum = sa.Enum('PENDING', 'ACTIVE', 'CLOSED', name='recommendationstatus')

def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Step 1: Add the new `activated_at` column. It can be nullable.
    op.add_column('recommendations', sa.Column('activated_at', sa.DateTime(timezone=True), nullable=True))

    # Step 2: Create the ENUM type in the database.
    recommendation_status_enum.create(op.get_bind())

    # Step 3: We need to handle the transition of the 'status' column.
    # It's safer to create a new column, populate it, drop the old one, and rename.
    
    # Create a temporary column with the new ENUM type
    op.add_column('recommendations', sa.Column('status_new', recommendation_status_enum, nullable=True))
    
    # Populate the new column based on the old one.
    # We assume that all previous 'OPEN' trades are now considered 'ACTIVE'.
    # Any other status will be handled as 'CLOSED'. A new recommendation will be 'PENDING'.
    op.execute("UPDATE recommendations SET status_new = 'ACTIVE' WHERE status = 'OPEN'")
    op.execute("UPDATE recommendations SET status_new = 'CLOSED' WHERE status = 'CLOSED'")
    
    # Drop the old VARCHAR column
    op.drop_column('recommendations', 'status')
    
    # Rename the new column to 'status'
    op.alter_column('recommendations', 'status_new', new_column_name='status', nullable=False, server_default='PENDING')

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # To downgrade, we perform the reverse operations.
    
    # Rename 'status' back to a temporary name
    op.alter_column('recommendations', 'status', new_column_name='status_old', nullable=True)
    
    # Add the old VARCHAR column back
    op.add_column('recommendations', sa.Column('status', sa.String(), nullable=True))
    
    # Populate the old VARCHAR column from the ENUM column
    op.execute("UPDATE recommendations SET status = 'OPEN' WHERE status_old = 'ACTIVE'")
    op.execute("UPDATE recommendations SET status = 'CLOSED' WHERE status_old = 'CLOSED'")
    op.execute("UPDATE recommendations SET status = 'OPEN' WHERE status_old = 'PENDING'") # Downgrading PENDING to OPEN
    
    # Drop the temporary ENUM column
    op.drop_column('recommendations', 'status_old')
    
    # Drop the ENUM type from the database
    recommendation_status_enum.drop(op.get_bind())
    
    # Drop the `activated_at` column
    op.drop_column('recommendations', 'activated_at')
    
    # ### end Alembic commands ###
# --- END OF FILE ---